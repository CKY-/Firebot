{
  "openapi": "3.0.0",
  "info": {
    "title": "Firebot API Documentation",
    "version": "1.0.0",
    "description": "<div align=\"center\"><img\n    src=\"https://raw.githubusercontent.com/crowbartools/Firebot/refs/heads/master/src/gui/images/logo.png\"\n    alt=\"\"></div>\n\n [Firebot](http://firebot.app) hosts a local API that developers can use to get data from Firebot or tell it to run effects.\n- The API is hosted on port 7472. All endpoints have the root http://localhost:7472/api/v1\nAll responses are in JSON.\n- Don't forget that Firebot must be running for the API to be available.",
    "license": {
      "name": "GPL 3.0",
      "url": "https://github.com/crowbartools/Firebot?tab=GPL-3.0-1-ov-file#readme"
    }
  },
  "servers": [
    {
      "url": "http://localhost:7472/api/v1"
    }
  ],
  "paths": {
    "/auth": {
      "parameters": [
        {
          "in": "query",
          "name": "providerId",
          "description": "The ID of the provider.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Redirects the user to the authorization URI of the specified authentication provider. (e.g., Google OAuth2 authorization page).",
        "responses": {
          "200": {
            "description": "Auth details returned successfully."
          },
          "400": {
            "description": "Invalid providerId query param."
          }
        }
      }
    },
    "/auth/callback2": {
      "parameters": [
        {
          "in": "query",
          "name": "state",
          "description": "The state passed in the initial authentication request, used to identify the provider..",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Callback endpoint for authentication providers after user authorization. It exchanges the authorization code or token for an access token.",
        "responses": {
          "200": {
            "description": "Authentication callback handled."
          },
          "400": {
            "description": "Invalid provider id in state."
          },
          "500": {
            "description": "Authentication failed."
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Fetches the current status of Firebots connections, specifically the chat connection status.",
        "responses": {
          "200": {
            "description": "Status returned successfully.",
            "content": {
              "application/json": {
                "example": {
                  "connections": {
                    "chat": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/effects": {
      "get": {
        "tags": [
          "Effects"
        ],
        "description": "Fetches all effects.",
        "responses": {
          "200": {
            "description": "Effects fetched or executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "example": [
                  {
                    "id": "firebot:activeUserLists",
                    "name": "Manage Active Chat Users",
                    "description": "Add or remove users from the active chat user lists.",
                    "icon": "fad fa-users",
                    "categories": [
                      "common",
                      "twitch",
                      "chat based",
                      "Moderation",
                      "overlay",
                      "fun",
                      "integrations",
                      "advanced",
                      "scripting"
                    ],
                    "dependencies": [
                      "chat",
                      "overlay"
                    ]
                  },
                  "..."
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Effects"
        ],
        "description": "Executes an effect.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "streamerName"
                  },
                  "triggerData": {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "example": "streamerName"
                          },
                          "eventData": {
                            "type": "object",
                            "properties": {
                              "shared": {
                                "type": "boolean",
                                "example": true
                              },
                              "totalMonths": {
                                "type": "integer",
                                "example": 6
                              }
                            }
                          },
                          "control": {
                            "type": "object",
                            "properties": {
                              "cost": {
                                "type": "integer",
                                "example": 10
                              },
                              "text": {
                                "type": "string",
                                "example": "Test Button"
                              },
                              "cooldown": {
                                "type": "string",
                                "example": "30"
                              },
                              "disabled": {
                                "type": "boolean",
                                "example": false
                              },
                              "progress": {
                                "type": "number",
                                "format": "float",
                                "example": 0.5
                              },
                              "tooltip": {
                                "type": "string",
                                "example": "Test tooltip"
                              }
                            }
                          },
                          "inputData": {
                            "type": "object",
                            "properties": {
                              "value": {
                                "type": "string",
                                "example": "@Textbox"
                              }
                            }
                          },
                          "command": {
                            "type": "object",
                            "properties": {
                              "commandID": {
                                "type": "string",
                                "example": "Test Command"
                              }
                            }
                          }
                        }
                      },
                      "userCommand": {
                        "type": "object",
                        "properties": {
                          "cmd": {
                            "type": "string",
                            "example": "!test"
                          },
                          "value": {
                            "type": "string",
                            "example": "!test"
                          }
                        }
                      },
                      "args": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "@TestArg1",
                          "TestArg2",
                          "@TestArg3",
                          "TestArg4",
                          "@TestArg5"
                        ]
                      },
                      "chatEvent": {
                        "type": "object",
                        "additionalProperties": true,
                        "example": {}
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Effects fetched or executed."
          },
          "400": {
            "description": "No effects provided."
          },
          "500": {
            "description": "Error response."
          }
        }
      }
    },
    "/effects/preset": {
      "parameters": [
        {
          "in": "query",
          "name": "trigger",
          "description": "The ID of the effect.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Effects"
        ],
        "description": "Fetches all preset lists.",
        "responses": {
          "200": {
            "description": "Preset lists returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": [
                  {
                    "id": "90e944d0-a276-11ec-a033-a9c16dcd8877",
                    "name": "StartStream",
                    "args": [
                      "lightsOn"
                    ]
                  },
                  "..."
                ]
              }
            }
          },
          "500": {
            "description": "Unknown error getting preset effect lists."
          }
        }
      }
    },
    "/effects/{effectId}": {
      "parameters": [
        {
          "in": "path",
          "name": "effectId",
          "required": true,
          "description": "The ID of the effect.",
          "schema": {
            "type": "string",
            "format": "namespace:effect"
          }
        }
      ],
      "get": {
        "tags": [
          "Effects"
        ],
        "description": "Fetches a specific effect by its ID.",
        "responses": {
          "200": {
            "description": "Effect fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "id": "firebot:activeUserLists",
                    "name": "Manage Active Chat Users",
                    "description": "Add or remove users from the active chat user lists.",
                    "icon": "fad fa-users",
                    "categories": [
                      "common",
                      "twitch",
                      "chat based",
                      "Moderation",
                      "overlay",
                      "fun",
                      "integrations",
                      "advanced",
                      "scripting"
                    ],
                    "dependencies": [
                      "chat",
                      "overlay"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot find effect effectId."
          }
        }
      }
    },
    "/effects/preset/{presetListId}": {
      "parameters": [
        {
          "in": "path",
          "name": "presetListId",
          "required": true,
          "description": "The ID of the effect.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Effects"
        ],
        "description": "Runs a preset list synchronously.",
        "responses": {
          "200": {
            "description": "Effects fetched or executed."
          },
          "400": {
            "description": "No presetListId provided."
          },
          "404": {
            "description": "Cannot find preset effect list presetList."
          },
          "500": {
            "description": "Error response."
          }
        }
      },
      "post": {
        "tags": [
          "Effects"
        ],
        "description": "Runs a preset list synchronously.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "args": {
                    "description": "The argument object in json format",
                    "type": "object"
                  },
                  "username": {
                    "description": "The triggering user by name",
                    "type": "string"
                  }
                }
              },
              "examples": {
                "streamer": {
                  "value": {
                    "args": {
                      "data": 2,
                      "funWords": "string of strings"
                    },
                    "username": "ebiggz"
                  }
                },
                "viewer": {
                  "value": {
                    "args": {
                      "data": 2,
                      "funWords": "string of strings"
                    },
                    "username": "heyaapl"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Effects fetched or executed."
          },
          "400": {
            "description": "No presetListId provided."
          },
          "404": {
            "description": "Cannot find preset effect list presetList."
          },
          "500": {
            "description": "Error response."
          }
        }
      }
    },
    "/effects/preset/{presetListId}/run": {
      "parameters": [
        {
          "in": "path",
          "name": "presetListId",
          "required": true,
          "description": "The ID of the effect.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Effects"
        ],
        "description": "Triggers a preset list asynchronously.",
        "responses": {
          "200": {
            "description": "Effects fetched or executed."
          },
          "400": {
            "description": "No presetListId provided."
          },
          "404": {
            "description": "Cannot find preset effect list presetList."
          },
          "500": {
            "description": "Error response."
          }
        }
      },
      "post": {
        "tags": [
          "Effects"
        ],
        "description": "Triggers a preset list asynchronously.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "args": {
                    "description": "The argument object in json format",
                    "type": "object"
                  },
                  "username": {
                    "description": "The triggering user by name",
                    "type": "string"
                  }
                }
              },
              "examples": {
                "streamer": {
                  "value": {
                    "args": {
                      "data": 2,
                      "funWords": "string of strings"
                    },
                    "username": "ebiggz"
                  }
                },
                "viewer": {
                  "value": {
                    "args": {
                      "data": 2,
                      "funWords": "string of strings"
                    },
                    "username": "heyaapl"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Effects fetched or executed."
          },
          "400": {
            "description": "No presetListId provided."
          },
          "404": {
            "description": "Cannot find preset effect list presetList."
          },
          "500": {
            "description": "Error response."
          }
        }
      }
    },
    "/commands/system": {
      "get": {
        "tags": [
          "Commands"
        ],
        "description": "Fetches all system commands.",
        "responses": {
          "200": {
            "description": "System commands fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "example": [
                    {
                      "id": "firebot:commandlist",
                      "trigger": "!commands",
                      "name": "Command List."
                    },
                    "..."
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Unknown error getting system commands."
          }
        }
      }
    },
    "/commands/system/{sysCommandId}": {
      "parameters": [
        {
          "in": "path",
          "name": "sysCommandId",
          "required": true,
          "description": "The ID of the system command.",
          "schema": {
            "type": "string",
            "format": "namespace:type"
          }
        }
      ],
      "get": {
        "tags": [
          "Commands"
        ],
        "description": "Fetches a specific system command by its ID.",
        "responses": {
          "200": {
            "description": "System command fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": [
                  {
                    "id": "firebot:commandlist",
                    "name": "Command List",
                    "active": true,
                    "trigger": "!commands",
                    "description": "Displays a link to your profile page with all available commands.",
                    "autoDeleteTrigger": false,
                    "scanWholeMessage": false,
                    "cooldown": {
                      "user": 0,
                      "global": 0
                    },
                    "options": {
                      "successTemplate": {
                        "type": "string",
                        "title": "Output Template",
                        "description": "The chat message to send with a link to your profile page.",
                        "tip": "Variables: {url}",
                        "default": "You can view the list of commands here: {url}",
                        "useTextArea": true
                      },
                      "noCommandsTemplate": {
                        "type": "string",
                        "title": "No Commands Output Template",
                        "description": "The chat message to send when a user has no commands they are allowed to run.",
                        "tip": "Variables: {username}",
                        "default": "{username}, there are no commands that you are allowed to run.",
                        "useTextArea": true
                      }
                    },
                    "type": "system"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "No sysCommandId provided."
          },
          "404": {
            "description": "System command sysCommandId not found."
          }
        }
      }
    },
    "/commands/system/{sysCommandId}/run": {
      "parameters": [
        {
          "in": "path",
          "name": "sysCommandId",
          "required": true,
          "description": "The ID of the effect.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Commands"
        ],
        "description": "Executes a system command.",
        "responses": {
          "200": {
            "description": "System command executed successfully."
          },
          "400": {
            "description": "No sysCommandId provided."
          },
          "404": {
            "description": "System command sysCommandId not found."
          },
          "500": {
            "description": "Error executing system command sysCommandId."
          }
        }
      },
      "post": {
        "tags": [
          "Commands"
        ],
        "description": "Executes a system command.",
        "responses": {
          "200": {
            "description": "System command executed successfully."
          },
          "400": {
            "description": "No sysCommandId provided."
          },
          "404": {
            "description": "System command sysCommandId not found."
          },
          "500": {
            "description": "Error executing system command sysCommandId."
          }
        }
      }
    },
    "/commands/custom": {
      "get": {
        "tags": [
          "Commands"
        ],
        "description": "Fetches all custom commands.",
        "responses": {
          "200": {
            "description": "Custom commands fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "example": [
                  {
                    "id": "e7cf0470-cec3-11ea-9a2c-c96e412d3e47",
                    "trigger": "!bot",
                    "description": "See if the bot is active."
                  },
                  "..."
                ]
              }
            }
          },
          "500": {
            "description": "Unknown error getting system commands."
          }
        }
      }
    },
    "/commands/custom/{customCommandId}": {
      "parameters": [
        {
          "in": "path",
          "name": "customCommandId",
          "required": true,
          "description": "The ID of the custom command.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Commands"
        ],
        "description": "Fetches a specific custom command by its ID.",
        "responses": {
          "200": {
            "description": "Custom command fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": [
                  {
                    "active": true,
                    "cooldown": {
                      "user": 0,
                      "global": 300
                    },
                    "effects": {
                      "list": [
                        {
                          "id": "41b5ec30-5726-11ef-bc52-4f77de7382a8",
                          "type": "firebot:chat",
                          "chatter": "Bot",
                          "message": "im not a bot im a boy i have been called a bot $count times",
                          "active": true,
                          "me": true,
                          "percentWeight": null
                        }
                      ],
                      "id": "d80aea40-cec3-11ea-9a2c-c96e412d3e47",
                      "queue": null
                    },
                    "ignoreBot": true,
                    "restrictionData": {
                      "restrictions": [
                        {
                          "id": "40f2c420-2776-11ee-befb-576ea2e18d8c",
                          "type": "firebot:followcheck",
                          "value": "SReject",
                          "checkMode": "streamer"
                        }
                      ],
                      "mode": "all",
                      "sendFailMessage": true,
                      "failMessage": "Sorry, you cannot use this command because: {reason}"
                    },
                    "sortTags": [],
                    "trigger": "!bot",
                    "id": "e7cf0470-cec3-11ea-9a2c-c96e412d3e47",
                    "createdBy": "sreject",
                    "createdAt": "2020-07-25T16:12:19-06:00",
                    "count": 194,
                    "lastEditBy": "sreject",
                    "lastEditAt": "2025-01-15T12:39:20.895-07:00",
                    "simple": false,
                    "sendCooldownMessage": true,
                    "cooldownMessage": "This command is still on cooldown for: {timeLeft}",
                    "aliases": [],
                    "description": "See if the bot is active.",
                    "treatQuotedTextAsSingleArg": false,
                    "type": "custom",
                    "hidden": true,
                    "scanWholeMessage": true,
                    "allowTriggerBySharedChat": true
                  }
                ]
              }
            }
          },
          "400": {
            "description": "No customCommandId provided."
          },
          "404": {
            "description": "Custom command customCommandId not found."
          }
        }
      }
    },
    "/commands/custom/{customCommandId}/run": {
      "parameters": [
        {
          "in": "path",
          "name": "customCommandId",
          "required": true,
          "description": "The ID of the effect.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Commands"
        ],
        "description": "Executes a custom command.",
        "responses": {
          "200": {
            "description": "Custom command executed successfully."
          },
          "400": {
            "description": "No customCommandId provided."
          },
          "404": {
            "description": "System command customCommandId not found."
          },
          "500": {
            "description": "Error executing system command customCommandId."
          }
        }
      },
      "post": {
        "tags": [
          "Commands"
        ],
        "description": "Executes a custom command.",
        "responses": {
          "200": {
            "description": "Custom command executed successfully."
          },
          "400": {
            "description": "No customCommandId provided."
          },
          "404": {
            "description": "System command customCommandId not found."
          },
          "500": {
            "description": "Error executing system command customCommandId."
          }
        }
      }
    },
    "/fonts": {
      "get": {
        "tags": [
          "Fonts"
        ],
        "description": "Fetches all font names.",
        "responses": {
          "200": {
            "description": "Font names returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "example": [
                  {
                    "name": "Arial",
                    "format": "truetype"
                  },
                  "..."
                ]
              }
            }
          }
        }
      }
    },
    "/fonts/{name}": {
      "parameters": [
        {
          "in": "path",
          "name": "name",
          "required": true,
          "description": "The name of the font.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Fonts"
        ],
        "description": "Fetches a specific font by name.",
        "responses": {
          "200": {
            "description": "Font fetched successfully."
          },
          "404": {
            "description": "Font not found."
          }
        }
      }
    },
    "/custom-variables": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "Fetches all custom variables.",
        "responses": {
          "200": {
            "description": "Custom variables fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "testVar1": {
                    "t": 0,
                    "v": 1
                  },
                  "MicMuteState": {
                    "t": 0,
                    "v": false
                  },
                  "modsCreditsSet": {
                    "t": 0,
                    "v": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "/custom-variables/{variableName}": {
      "parameters": [
        {
          "in": "path",
          "name": "variableName",
          "required": true,
          "description": "The name of the custom variable.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "Fetches a specific custom variable by name.",
        "responses": {
          "200": {
            "description": "Custom variable fetched successfully."
          }
        }
      },
      "post": {
        "tags": [
          "Variables"
        ],
        "description": "Sets the value of a custom variable.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "data": {
                    "description": "The data to store.",
                    "type": "string",
                    "example": "data to store in the variable"
                  },
                  "ttl": {
                    "description": "The time-to-live durration.",
                    "type": "string",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom variable set successfully."
          }
        }
      }
    },
    "/variables": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "Fetches all replace variables.",
        "responses": {
          "200": {
            "description": "Replace variables fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "example": [
                  {
                    "definition": {
                      "handle": "&name",
                      "usage": "&name[...path?]",
                      "description": "Retrieves the value for an effectOutput. If path is specified, walks the item before returning the value",
                      "examples": [
                        {
                          "usage": "&example",
                          "description": "Returns the value of the effectOutput 'example'; Synonymous with $effectOutput[example]"
                        },
                        {
                          "usage": "&example[path, to, value]",
                          "description": "Returns the value of the effectOutput 'example'; Synonymous with $effectOutput[example, path.to.value]"
                        }
                      ],
                      "categories": [
                        "advanced"
                      ],
                      "possibleDataOutput": [
                        "ALL"
                      ],
                      "spoof": true
                    },
                    "handle": "&name"
                  },
                  "..."
                ]
              }
            }
          }
        }
      }
    },
    "/viewers": {
      "get": {
        "tags": [
          "Viewers"
        ],
        "description": "Fetches all viewers.",
        "responses": {
          "200": {
            "description": "Viewer data returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "example": [
                  {
                    "id": "58612601",
                    "username": "ebiggz",
                    "displayName": "ebiggz"
                  },
                  "..."
                ]
              }
            }
          }
        }
      }
    },
    "/viewers/export": {
      "get": {
        "tags": [
          "Viewers"
        ],
        "description": "Exports all user data as JSON.",
        "responses": {
          "200": {
            "description": "Viewer data exported as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "example": [
                  {
                    "username": "ebiggz",
                    "_id": "58612601",
                    "displayName": "ebiggz",
                    "profilePicUrl": "https://static-cdn.jtvnw.net/jtv_user_pictures/5545fe76-a341-4ffb-bc79-7ca8075588a1-profile_image-300x300.png",
                    "twitch": true,
                    "twitchRoles": [
                      "broadcaster",
                      "sub"
                    ],
                    "online": false,
                    "onlineAt": 1733422513344,
                    "lastSeen": 1733425628339,
                    "joinDate": 1677340192238,
                    "minutesInChannel": 2908,
                    "chatMessages": 595,
                    "disableAutoStatAccrual": false,
                    "disableActiveUserList": false,
                    "disableViewerList": false,
                    "metadata": {
                      "giftedSubs": 4
                    },
                    "currency": {
                      "d073da00-a726-11e9-a874-7de9c8544807": {
                        "id": "d073da00-a726-11e9-a874-7de9c8544807",
                        "name": "Points",
                        "amount": 3479
                      }
                    },
                    "ranks": {
                      "4e834bc0-47a8-11ef-acab-ab8744fe0dbe": "5b149d83-3021-4afd-875d-034b00a4a91b"
                    }
                  },
                  "..."
                ]
              }
            }
          }
        }
      }
    },
    "/viewers/{userId}": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "description": "An ID that uniquely identifies the user.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "username",
          "description": "use username or userId true/false (default false).",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Viewers"
        ],
        "description": "Fetches metadata of a specific viewer by userId.",
        "responses": {
          "200": {
            "description": "Viewer metadata fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "username": "ebiggz",
                  "_id": "58612601",
                  "displayName": "ebiggz",
                  "profilePicUrl": "https://static-cdn.jtvnw.net/jtv_user_pictures/5545fe76-a341-4ffb-bc79-7ca8075588a1-profile_image-300x300.png",
                  "twitch": true,
                  "twitchRoles": [
                    "broadcaster",
                    "sub"
                  ],
                  "online": false,
                  "onlineAt": 1733422513344,
                  "lastSeen": 1733425628339,
                  "joinDate": 1677340192238,
                  "minutesInChannel": 2908,
                  "chatMessages": 595,
                  "disableAutoStatAccrual": false,
                  "disableActiveUserList": false,
                  "disableViewerList": false,
                  "metadata": {
                    "giftedSubs": 4
                  },
                  "currency": {
                    "d073da00-a726-11e9-a874-7de9c8544807": 3479,
                    "3eba5d80-4297-11ee-86eb-d7d7d2938882": 3445
                  },
                  "ranks": {
                    "4e834bc0-47a8-11ef-acab-ab8744fe0dbe": "5b149d83-3021-4afd-875d-034b00a4a91b"
                  },
                  "customRoles": [
                    {
                      "id": "6f3b78b0-025c-11ef-bcad-3ff3fa1199ea",
                      "name": "firebot"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "No viewerIdOrName provided."
          },
          "404": {
            "description": "Specified viewer does not exist."
          }
        }
      }
    },
    "/viewers/{userId}/metadata/{metadataKey}": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "description": "An ID that uniquely identifies the user.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "metadataKey",
          "required": true,
          "description": "The key of the metadata to be modified or deleted.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "username",
          "description": "use username or userId true/false (default false).",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": [
          "Viewers"
        ],
        "description": "Updates metadata for a specific viewer.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "data": {
                    "description": "The data to store in metadata.",
                    "type": "string",
                    "example": "data to store in metadata"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata added successfully."
          },
          "204": {
            "description": "Metadata added successfully."
          },
          "400": {
            "description": "No viewerIdOrName provided."
          },
          "404": {
            "description": "Specified viewer does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "Viewers"
        ],
        "description": "Updates metadata for a specific viewer.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "data": {
                    "description": "The data to store.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata updated successfully."
          },
          "204": {
            "description": "Metadata updated successfully."
          },
          "400": {
            "description": "No viewerIdOrName provided."
          },
          "404": {
            "description": "Specified viewer does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "Viewers"
        ],
        "description": "Removes metadata for a specific viewer.",
        "responses": {
          "204": {
            "description": "Metadata removed successfully."
          },
          "400": {
            "description": "No viewerIdOrName provided.",
            "content": {
              "application/json": {
                "examples": {
                  "NoMetadataKey": {
                    "summary": "No metadataKey provided.",
                    "value": {
                      "status": "error",
                      "message": "No metadataKey provided."
                    }
                  },
                  "NoViewer": {
                    "summary": "No viewerId provided.",
                    "value": {
                      "status": "error",
                      "message": "No viewerId provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified viewer does not exist.",
            "content": {
              "application/json": {
                "examples": {
                  "NoMetadataKey": {
                    "summary": "No metadataKey provided.",
                    "value": {
                      "status": "error",
                      "message": "No metadataKey provided."
                    }
                  },
                  "NoViewer": {
                    "summary": "No viewerId provided.",
                    "value": {
                      "status": "error",
                      "message": "No viewerId provided."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/viewers/{userId}/currency": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "description": "An ID that uniquely identifies the user.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "username",
          "description": "use username or userId true/false (default false).",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Viewers"
        ],
        "description": "Fetches currency details for a specific viewer.",
        "responses": {
          "200": {
            "description": "User currency fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "d073da00-a726-11e9-a874-7de9c8544807": 3479,
                  "3eba5d80-4297-11ee-86eb-d7d7d2938882": 3445
                }
              }
            }
          },
          "400": {
            "description": "No viewerIdOrName provided."
          }
        }
      }
    },
    "/viewers/{userId}/currency/{currencyId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/userIdParam"
        },
        {
          "$ref": "#/components/parameters/currencyId"
        },
        {
          "$ref": "#/components/parameters/usernameBoolParam"
        }
      ],
      "get": {
        "tags": [
          "Viewers"
        ],
        "description": "Fetches specific currency details for a viewer.",
        "responses": {
          "200": {
            "description": "User currency set successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": 3479
              }
            }
          },
          "400": {
            "description": "No currencyId provided.",
            "content": {
              "application/json": {
                "examples": {
                  "NoCurrencyID": {
                    "summary": "No currencyId provided.",
                    "value": {
                      "status": "error",
                      "message": "No currencyId provided."
                    }
                  },
                  "NoViewer": {
                    "summary": "No viewerId provided.",
                    "value": {
                      "status": "error",
                      "message": "No viewerId provided."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Viewers"
        ],
        "description": "Sets the currency for a specific viewer.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Value to set/increment.",
                    "type": "number"
                  },
                  "setAmount": {
                    "description": "Indicates whether to set or adjust.",
                    "type": "string",
                    "enum": [
                      "set",
                      "adjust"
                    ]
                  }
                }
              },
              "examples": {
                "set": {
                  "value": {
                    "amount": 10,
                    "setAmount": "set"
                  }
                },
                "adjust": {
                  "value": {
                    "amount": 10,
                    "setAmount": "adjust"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User currency set successfully."
          },
          "400": {
            "description": "No viewerIdOrName provided."
          }
        }
      }
    },
    "/viewers/{userId}/customRoles": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "description": "An ID that uniquely identifies the user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Viewers"
        ],
        "description": "Fetches custom roles for a specific viewer.",
        "responses": {
          "200": {
            "description": "User custom roles fetched successfully.."
          },
          "400": {
            "description": "No viewerIdOrName provided."
          },
          "404": {
            "description": "Specified viewer does not exist."
          }
        }
      }
    },
    "/viewers/{userId}/customRoles/{customRoleId}": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "description": "An ID that uniquely identifies the user.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "customRoleId",
          "required": true,
          "description": "The ID of the custom role.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "post": {
        "tags": [
          "Viewers"
        ],
        "description": "Adds a specific viewer to a custom role.",
        "responses": {
          "201": {
            "description": "Viewer added to custom role successfully."
          },
          "400": {
            "description": "No customRoleId provided."
          },
          "404": {
            "description": "Specified custom role does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "Viewers"
        ],
        "description": "Removes a specific viewer from a custom role.",
        "responses": {
          "204": {
            "description": "Viewer added to custom role successfully."
          },
          "400": {
            "description": "No viewerIdOrName provided."
          },
          "404": {
            "description": "Specified viewer does not exist."
          }
        }
      }
    },
    "/customRoles": {
      "get": {
        "tags": [
          "Custom Roles"
        ],
        "description": "Fetches all custom roles.",
        "responses": {
          "200": {
            "description": "Custom roles fetched successfully."
          }
        }
      }
    },
    "/customRoles/{customRoleId}": {
      "parameters": [
        {
          "in": "path",
          "name": "customRoleId",
          "required": true,
          "description": "The ID of the custom role.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Custom Roles"
        ],
        "description": "Fetches a specific custom role by its ID.",
        "responses": {
          "200": {
            "description": "Custom role fetched successfully."
          },
          "400": {
            "description": "No customRoleId provided."
          },
          "404": {
            "description": "Custom role customRoleId not found."
          }
        }
      }
    },
    "/customRoles/{customRoleId}/clear": {
      "parameters": [
        {
          "in": "path",
          "name": "customRoleId",
          "required": true,
          "description": "The ID of the custom role.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Custom Roles"
        ],
        "description": "Clears all viewers from a specific custom role.",
        "responses": {
          "204": {
            "description": "All viewers removed from the custom role successfully."
          },
          "400": {
            "description": "No customRoleId provided."
          },
          "404": {
            "description": "Specified custom role does not exist."
          }
        }
      }
    },
    "/customRoles/{customRoleId}/viewer/{userId}": {
      "parameters": [
        {
          "in": "path",
          "name": "customRoleId",
          "required": true,
          "description": "The ID of the custom role.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        },
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "description": "An ID that uniquely identifies the user.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": [
          "Custom Roles"
        ],
        "description": "Adds a specific viewer to a custom role.",
        "responses": {
          "201": {
            "description": "Add specific viewer to custom role successfully."
          },
          "400": {
            "description": "No customRoleId provided.",
            "content": {
              "application/json": {
                "examples": {
                  "NoRoleID": {
                    "summary": "No customRoleId provided.",
                    "value": {
                      "status": "error",
                      "message": "No customRoleId provided."
                    }
                  },
                  "NoViewer": {
                    "summary": "No viewerId provided.",
                    "value": {
                      "status": "error",
                      "message": "No viewerId provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified custom role.",
            "content": {
              "application/json": {
                "examples": {
                  "NoRole": {
                    "summary": "Specified custom role does not exist.",
                    "value": {
                      "status": "error",
                      "message": "Specified custom role does not exist."
                    }
                  },
                  "NoViewer": {
                    "summary": "Specified viewer does not exist.",
                    "value": {
                      "status": "error",
                      "message": "Specified viewer does not exist."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Roles"
        ],
        "description": "Removes a specific viewer from a custom role.",
        "responses": {
          "204": {
            "description": "Add specific viewer to custom role successfully."
          },
          "400": {
            "description": "No customRoleId provided.",
            "content": {
              "application/json": {
                "examples": {
                  "NoRoleID": {
                    "summary": "No customRoleId provided.",
                    "value": {
                      "message": "No customRoleId provided."
                    }
                  },
                  "NoViewer": {
                    "summary": "No viewerId provided.",
                    "value": {
                      "message": "No viewerId provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified custom role does not exist.",
            "content": {
              "application/json": {
                "examples": {
                  "RoleNotExist": {
                    "summary": "Specified custom role does not exist.",
                    "value": {
                      "status": "error",
                      "message": "Specified custom role does not exist."
                    }
                  },
                  "ViewerNotExist": {
                    "summary": "Specified viewer does not exist.",
                    "value": {
                      "status": "error",
                      "message": "specified viewer does not exist."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "description": "Fetches all currencies.",
        "responses": {
          "200": {
            "description": "Currencies fetched successfully."
          }
        }
      }
    },
    "/currency/{currencyName}": {
      "parameters": [
        {
          "in": "path",
          "name": "currencyName",
          "required": true,
          "description": "The name of the currency.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Currency"
        ],
        "description": "Fetches specific currency details by name.",
        "responses": {
          "200": {
            "description": "Currency details fetched successfully."
          }
        }
      }
    },
    "/currency/{currencyName}/top": {
      "parameters": [
        {
          "in": "path",
          "name": "currencyName",
          "required": true,
          "description": "The name of the currency.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "count",
          "schema": {
            "type": "integer"
          },
          "description": "top count to return."
        }
      ],
      "get": {
        "tags": [
          "Currency"
        ],
        "description": "Fetches top currency holders for a specific currency.",
        "responses": {
          "200": {
            "description": "Top currency holders fetched successfully."
          }
        }
      }
    },
    "/quotes": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "description": "Fetches all quotes.",
        "responses": {
          "200": {
            "description": "Quote updated successfully."
          }
        }
      },
      "post": {
        "tags": [
          "Quotes"
        ],
        "description": "Posts a new quote.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "text": {
                    "description": "The text of the quote.",
                    "type": "string",
                    "example": "you can't shoot me, if you don't have any arms"
                  },
                  "game": {
                    "description": "The game that is being played.",
                    "type": "string",
                    "example": "Fallout 76"
                  },
                  "originator": {
                    "description": "Who said the quote.",
                    "type": "string",
                    "example": "arblane"
                  },
                  "creator": {
                    "description": "Who quoted it.",
                    "type": "string",
                    "example": "Ripdan"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote updated successfully.",
            "content": {
              "application/json": {
                "examples": {
                  "QuoteUpdated": {
                    "summary": "Quote updated successfully.",
                    "value": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing quote text",
            "content": {
              "application/json": {
                "examples": {
                  "MissingText": {
                    "summary": "Missing quote text.",
                    "value": {
                      "status": "error",
                      "message": "Missing quote text."
                    }
                  },
                  "NoCreator": {
                    "summary": "Missing quote creator.",
                    "value": {
                      "status": "error",
                      "message": "Missing quote creator."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating quote 'reason'."
          }
        }
      }
    },
    "/quotes/{quoteId}": {
      "parameters": [
        {
          "in": "path",
          "name": "quoteId",
          "required": true,
          "description": "The ID of the quote.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Quotes"
        ],
        "description": "Fetches a specific quote by its ID.",
        "responses": {
          "200": {
            "description": "Quote fetched successfully."
          },
          "404": {
            "description": "Quote quoteId not found."
          }
        }
      },
      "put": {
        "tags": [
          "Quotes"
        ],
        "description": "Updates a specific quote by its ID.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "text": {
                    "description": "The text of the quote.",
                    "type": "string",
                    "example": "I have derpkitty."
                  },
                  "game": {
                    "description": "The game that is being played.",
                    "type": "string",
                    "example": "Minecraft"
                  },
                  "originator": {
                    "description": "Who said the quote.",
                    "type": "string",
                    "example": "Katwyld"
                  },
                  "creator": {
                    "description": "Who quoted it.",
                    "type": "string",
                    "example": "lowercqse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote updated successfully."
          },
          "400": {
            "description": "Missing quote text",
            "content": {
              "application/json": {
                "examples": {
                  "MissingText": {
                    "summary": "Missing quote text.",
                    "value": {
                      "status": "error",
                      "message": "Missing quote text."
                    }
                  },
                  "NoCreator": {
                    "summary": "Missing quote creator.",
                    "value": {
                      "status": "error",
                      "message": "Missing quote creator."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating quote 'reason'."
          }
        }
      },
      "patch": {
        "tags": [
          "Quotes"
        ],
        "description": "Partially updates a specific quote by its ID.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "text": {
                    "description": "The text of the quote.",
                    "type": "string",
                    "example": "I have derpkitty."
                  },
                  "game": {
                    "description": "The game that is being played.",
                    "type": "string",
                    "example": "Minecraft"
                  },
                  "originator": {
                    "description": "Who said the quote.",
                    "type": "string",
                    "example": "Katwyld"
                  },
                  "creator": {
                    "description": "Who quoted it.",
                    "type": "string",
                    "example": "DrRedPanda"
                  },
                  "createdAt": {
                    "description": "When the quote happend.",
                    "type": "string",
                    "example": "01/05/2022"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote updated successfully."
          },
          "404": {
            "description": "Quote quoteId not found."
          },
          "500": {
            "description": "Error creating quote 'reason'."
          }
        }
      },
      "delete": {
        "tags": [
          "Quotes"
        ],
        "description": "Deletes a specific quote by its ID.",
        "responses": {
          "204": {
            "description": "Quote deleted successfully."
          },
          "404": {
            "description": "Quote quoteId not found."
          }
        }
      }
    },
    "/counters": {
      "get": {
        "tags": [
          "Counters"
        ],
        "description": "Fetches all counters.",
        "responses": {
          "200": {
            "description": "Counters fetched successfully."
          }
        }
      }
    },
    "/counters/{counterId}": {
      "parameters": [
        {
          "in": "path",
          "name": "counterId",
          "required": true,
          "description": "The ID of the counter.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Counters"
        ],
        "description": "Fetches a specific counter by its ID.",
        "responses": {
          "200": {
            "description": "Counter fetched successfully."
          },
          "400": {
            "description": "No counterId provided."
          },
          "404": {
            "description": "Counter counterId not found."
          }
        }
      },
      "post": {
        "tags": [
          "Counters"
        ],
        "description": "Updates a specific counter by its ID.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "value": {
                    "description": "The value to increment set/increment the counter.",
                    "type": "number",
                    "example": 20
                  },
                  "override": {
                    "description": "Overwrite the current value.",
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Counter updated successfully."
          },
          "400": {
            "description": "No counterId provided.",
            "content": {
              "application/json": {
                "examples": {
                  "CounterIdProvided": {
                    "summary": "No counterId provided.",
                    "value": {
                      "status": "error",
                      "message": "No counterId provided."
                    }
                  },
                  "ValueNotPresent": {
                    "summary": "Value not present.",
                    "value": {
                      "status": "error",
                      "message": "Value not present."
                    }
                  },
                  "ValueNAN": {
                    "summary": "Value must be a number.",
                    "value": {
                      "status": "error",
                      "message": "Value must be a number."
                    }
                  },
                  "OverrideBool": {
                    "summary": "Override must be a boolean.",
                    "value": {
                      "status": "error",
                      "message": "Override must be a boolean."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Counter counterId not found."
          }
        }
      }
    },
    "/timers": {
      "get": {
        "tags": [
          "Timers"
        ],
        "description": "Fetches all timers.",
        "responses": {
          "200": {
            "description": "Timers fetched successfully."
          }
        }
      }
    },
    "/timers/{timerId}": {
      "parameters": [
        {
          "in": "path",
          "name": "timerId",
          "required": true,
          "description": "The ID of the timer.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Timers"
        ],
        "description": "Fetches a specific timer by its ID.",
        "responses": {
          "200": {
            "description": "Timer fetched successfully."
          },
          "400": {
            "description": "No timerId provided."
          },
          "404": {
            "description": "Timer timerId not found."
          }
        }
      }
    },
    "/timers/{timerId}/{action}": {
      "parameters": [
        {
          "in": "path",
          "name": "timerId",
          "required": true,
          "description": "The ID of the timer.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        },
        {
          "in": "path",
          "name": "action",
          "required": true,
          "description": "The action to be preformed. can be \"toggle\", \"enable\", \"disable\" or \"clear\".",
          "schema": {
            "type": "string",
            "enum": [
              "toggle",
              "enable",
              "disable",
              "clear"
            ]
          }
        }
      ],
      "get": {
        "tags": [
          "Timers"
        ],
        "description": "Updates a specific timer by its ID.",
        "responses": {
          "200": {
            "description": "Timer updated successfully."
          },
          "400": {
            "description": "invalid action provided.",
            "content": {
              "application/json": {
                "examples": {
                  "InvalidAction": {
                    "summary": "Invalid action provided.",
                    "value": {
                      "status": "error",
                      "message": "Invalid action provided."
                    }
                  },
                  "TimerIdProvided": {
                    "summary": "No timerId provided.",
                    "value": {
                      "status": "error",
                      "message": "No timerId provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Timer timerId not found."
          }
        }
      }
    },
    "/queues": {
      "get": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Fetches all queues.",
        "responses": {
          "200": {
            "description": "Queue updated successfully."
          }
        }
      }
    },
    "/queues/{queueId}": {
      "parameters": [
        {
          "in": "path",
          "name": "queueId",
          "required": true,
          "description": "The ID of the queue.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Fetches a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue fetched successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      }
    },
    "/queues/{queueId}/pause": {
      "parameters": [
        {
          "in": "path",
          "name": "queueId",
          "required": true,
          "description": "The ID of the queue.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Pauses a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue paused successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      },
      "post": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Pauses a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue paused successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      }
    },
    "/queues/{queueId}/resume": {
      "parameters": [
        {
          "in": "path",
          "name": "queueId",
          "required": true,
          "description": "The ID of the queue.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Resumes a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue resumed successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      },
      "post": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Resumes a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue resumed successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      }
    },
    "/queues/{queueId}/toggle": {
      "parameters": [
        {
          "in": "path",
          "name": "queueId",
          "required": true,
          "description": "The ID of the queue.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Toggles a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue toggled successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      },
      "post": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Toggles a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue toggled successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      }
    },
    "/queues/{queueId}/clear": {
      "parameters": [
        {
          "in": "path",
          "name": "queueId",
          "required": true,
          "description": "The ID of the queue.",
          "schema": {
            "$ref": "#/components/schemas/UUIDString"
          }
        }
      ],
      "get": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Clears a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue cleared successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      },
      "post": {
        "tags": [
          "Effect Queues"
        ],
        "description": "Clears a specific queue by its ID.",
        "responses": {
          "200": {
            "description": "Queue cleared successfully."
          },
          "400": {
            "description": "No queueId provided."
          },
          "404": {
            "description": "Queue queueId not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UUIDString": {
        "type": "string",
        "format": "uuid"
      }
    },
    "parameters": {
      "userIdParam": {
        "in": "path",
        "name": "userId",
        "required": true,
        "description": "An ID that uniquely identifies the user.",
        "schema": {
          "type": "string"
        }
      },
      "metadataKeyParam": {
        "in": "path",
        "name": "metadataKey",
        "required": true,
        "description": "The key of the metadata to be modified or deleted.",
        "schema": {
          "type": "string"
        }
      },
      "usernameBoolParam": {
        "in": "query",
        "name": "username",
        "description": "use username or userId true/false (default false).",
        "schema": {
          "type": "string"
        }
      },
      "currencyId": {
        "in": "path",
        "name": "currencyId",
        "required": true,
        "description": "The ID of the currency.",
        "schema": {
          "$ref": "#/components/schemas/UUIDString"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "view all auth endpoints"
    },
    {
      "name": "Status",
      "description": "view the connection status"
    },
    {
      "name": "Commands",
      "description": "view all endpoints for commands"
    },
    {
      "name": "Counters",
      "description": "view all endpoints for counters"
    },
    {
      "name": "Currency",
      "description": "view all endpoints for currencies"
    },
    {
      "name": "Custom Roles",
      "description": "view all endpoints for custom roles"
    },
    {
      "name": "Effects",
      "description": "view all endpoints for effects"
    },
    {
      "name": "Effect Queues",
      "description": "view all endpoints for effect queues"
    },
    {
      "name": "Fonts",
      "description": "view all endpoints for installed fonts"
    },
    {
      "name": "Quotes",
      "description": "view all endpoints for quotes"
    },
    {
      "name": "Timers",
      "description": "view all endpoints for Timers"
    },
    {
      "name": "Variables",
      "description": "view all endpoints for variables"
    },
    {
      "name": "Viewers",
      "description": "view all endpoints for viewers"
    }
  ]
}